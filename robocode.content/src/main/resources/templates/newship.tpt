package $PACKAGE;

import java.awt.Color;

import robocode.HitRobotEvent;
import robocode.HitWallEvent;
import robocode.ScannedShipEvent;
import robocode.Ship;
import robocode.ScannedMissileEvent;
import robocode.HitByMissileEvent;
import robocode.HitByMineEvent;

/**
 * $CLASSNAME - a ship by (your name here)
 */
public class $CLASSNAME extends Ship{
	int direction = 1;
	
	/**
	 * run: $CLASSNAME's default behavior
	 */
	public void run(){
		// The following components can all be colored seperately
		// Setup
		setBodyColor(Color.red);
		setFrontCannonColor(Color.orange);
		setBackCannonColor(Color.yellow);
		setRadarColor(Color.green);
		setMineComponentColor(Color.cyan);
		setBulletColor(Color.blue);
		setScanColor(Color.magenta);
		
		//Easy way to make your radar go in circles forever
		setTurnRadarRightRadians(Double.POSITIVE_INFINITY);
		
		// Loop
		while(true){
			//Makes sure we go 4000 units toward a certain direction
			setAhead(4000 * direction);
			//Execute makes sure your commands actually get executed. You could see it
			//as if you're ending your turn.
			//Try removing the execute command. You'll see that that your Ship
			//won't even move! This is because you'll end up saying "Go ahead!" an infinite 
			//amount of times, without ever ending your turn.
			execute();
		}
	}
	// When a wall is hit, reverse direction and make a slight turn.
	public void onHitWall(HitWallEvent event){
		direction *= -1;
		setTurnRightDegrees(45);
	}

    public void onHitByMine(HitByMineEvent e){
        //Do something when you're hit by a mine
    }

    public void onHitByMissile(HitByMissileEvent e){
        //Do something when you're hit by a missile
    }

	public void onHitRobot(HitRobotEvent event){
		//Fill in something you'd like your Ship to do when it hits another Ship
	}
	
	public void onScannedShip(ScannedShipEvent event){
		// The easiest way to target the scanned ship is to use these functions
		// Turn your front cannon towards the ship
		setTurnFrontCannonRightRadians(event.getBearingFrontRadians());
		//At this point you've already told your ship to move 4000 ahead,
		//AND you've told it to turn its front cannon
		//All you gotta do now is wait for your cannon to reach its destination
		while(getFrontCannonTurnRemainingRadians() != 0){
			execute();
			if(getFrontCannonAtBlindSpot())
				break;
		}
		//If your front cannon is not at its blindspot
		if(!getFrontCannonAtBlindSpot()){
			//Then shoot!
			//fireFrontCannon(3); Not today! We're going to launch a missile!
		}
		if(!getFrontCannonAtBlindSpot()){
		    //Launch Missile(With the most power we can use of course)! A missile uses the front cannon as a launcher.
           	//A missile will travel at a certain speed and travel a certain distance. The speed is dependent on the power
           	//you use to fire the missile. A missile's power can be between 10 and 30.
           	//The more power, the heavier it will be, so the missile will be slower.
            //The distance the missile will travel is equal to the missile's power * 50. So in this case: 30*50 = 1500 pixels.
		    launchMissile(30);
		}
		//We waited all this time for our cannon to turn and it didn't even reach its target?!
		else{
			//Bomb the place.
			placeMine(5);
		}
	}

	public void onScannedMissile(ScannedMissileEvent event){
	//Basically works the same way as the onScannedShip method but instead of a ship it detects a missile.
	}
}
